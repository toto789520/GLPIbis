def register_user(name, age, tel, email, password, role='user'):
    """
    Enregistre un nouvel utilisateur dans le système
    
    Args:
        name (str): Nom de l'utilisateur
        age (int): Âge de l'utilisateur
        tel (str): Numéro de téléphone
        email (str): Adresse e-mail
        password (str): Mot de passe
        role (str, optional): Rôle de l'utilisateur ('user', 'admin', 'technician'). Par défaut 'user'.
    
    Returns:
        str: ID de l'utilisateur créé, ou None si échec
    
    Raises:
        ValueError: Si les données d'entrée sont invalides
    """
    # Vérifier que l'email n'est pas déjà utilisé
    existing_user = get_db("SELECT * FROM USEUR WHERE email = ?", (email,))
    if existing_user:
        raise ValueError("Cette adresse e-mail est déjà utilisée")
    
    # Vérifier que le mot de passe respecte les critères de complexité
    if not validate_password(password):
        raise ValueError("Le mot de passe ne respecte pas les critères de complexité")
    
    # Générer un identifiant unique
    user_id = generate_id()
    
    # Hasher le mot de passe
    ph = argon2.PasswordHasher()
    password_hash = ph.hash(password)
    
    # Préparer les données avec la date d'inscription
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Vérifier la structure de la table USEUR et ajouter les colonnes manquantes si nécessaire
    try:
        # Récupérer les informations sur les colonnes
        columns = get_db("PRAGMA table_info(USEUR)")
        column_names = [col[1] for col in columns]
        
        # Ajouter les colonnes manquantes si nécessaires
        if 'role' not in column_names:
            get_db("ALTER TABLE USEUR ADD COLUMN role TEXT DEFAULT 'user'")
        
        if 'age' not in column_names:
            get_db("ALTER TABLE USEUR ADD COLUMN age INTEGER")
        
        if 'tel' not in column_names:
            get_db("ALTER TABLE USEUR ADD COLUMN tel TEXT")
    except Exception as e:
        print(f"Avertissement lors de la vérification des colonnes: {e}")
    
    # Insérer avec une approche complète pour inclure toutes les colonnes
    try:
        query = """
            INSERT INTO USEUR (ID, name, hashed_password, email, dete_de_creation, role, age, tel)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """
        age_value = int(age) if age is not None and str(age).isdigit() else 0
        params = (user_id, name, password_hash, email, current_date, role, age_value, tel or '')
        get_db(query, params)
        
        # Créer la table state si elle n'existe pas
        get_db("""
            CREATE TABLE IF NOT EXISTS state (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                id_user TEXT NOT NULL UNIQUE,
                tiqué_créer INTEGER DEFAULT 0,
                tiqué_partisipé INTEGER DEFAULT 0,
                comm INTEGER DEFAULT 0,
                FOREIGN KEY (id_user) REFERENCES USEUR(ID)
            )
        """)
        
        # Initialiser les statistiques de l'utilisateur
        try:
            get_db("INSERT INTO state (id_user, tiqué_créer, tiqué_partisipé, comm) VALUES (?, 0, 0, 0)", 
                   (user_id,))
        except Exception as e:
            print(f"INFO: Impossible d'initialiser les statistiques: {e}")
